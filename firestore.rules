/**
 * @fileoverview Firestore Security Rules for Amani'store
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences,
 * and allows public read access to shoe product information. Write access to shoes is restricted
 * and would normally be controlled by database access control (DBAC) for admins, though admin roles
 * are not currently implemented in this prototype.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /shoes/{shoeId}: Stores shoe product information.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preferences.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile and preferences.
 * - Listing users is disallowed.
 * - Shoe data is publicly readable.
 * - Write access to shoes is denied in this prototype but would be reserved for admins.
 *
 * Denormalization for Authorization:
 *  Not applicable in this configuration, as the data structure uses path-based authorization.
 *  Future implementations requiring role-based access should denormalize role information directly
 *  onto the secured documents to avoid costly `get()` calls.
 *
 * Structural Segregation:
 *  User-specific data (profiles, preferences) is stored in user-specific subcollections, while
 *  publicly readable data (shoes) is stored in a top-level collection. This segregation improves
 *  security and performance for list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user ID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID and the document exists.
     * @param {string} userId The user ID to compare against.
     * @return {bool} True if the user ID matches and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user with UID 'user123' can create a profile at /users/user123.
     * @allow (get,update,delete) Signed-in user with UID 'user123' can read/update/delete their profile at /users/user123.
     * @deny (create) Signed-in user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get,update,delete) Signed-in user with UID 'user456' cannot read/update/delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for shoe products.
     * @path /shoes/{shoeId}
     * @allow (get,list) Any user (signed in or not) can read shoe data.
     * @deny (create,update,delete) No user can create/update/delete shoe data (admin-only in full implementation).
     * @principle Allows public read access to shoe data, restricts write access to admins (not implemented).
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Implement admin role check
    }

    /**
     * @description Defines rules for user preferences.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create) Signed-in user with UID 'user123' can create preferences at /users/user123/preferences/pref1.
     * @allow (get,update,delete) Signed-in user with UID 'user123' can read/update/delete their preferences at /users/user123/preferences/pref1.
     * @deny (create) Signed-in user with UID 'user456' cannot create preferences at /users/user123/preferences/pref1.
     * @deny (get,update,delete) Signed-in user with UID 'user456' cannot read/update/delete preferences at /users/user123/preferences/pref1.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/preferences/{preferenceId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
    
      /**
       * @description Defines rules for categories.
       * @path /categories
       * @allow (get,list) Any user (signed in or not) can read category data.
       * @deny (create,update,delete) No user can create/update/delete category data (admin-only in full implementation).
       * @principle Allows public read access to category data, restricts write access to admins (not implemented).
       */
      match /categories/{categoryId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Implement admin role check
      }
  }
}