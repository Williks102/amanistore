/**
 * @fileoverview Firestore Security Rules for Amani'store
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences,
 * and allows public read access to shoe product information. Write access to shoes is
 * implicitly denied (admin-only via DBAC, but not explicitly defined).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /shoes/{shoeId}: Stores shoe products, publicly readable. Write access is implicitly admin-only.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preferences, accessible only by the user themselves.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Shoes are publicly readable.
 * - Write access to the /shoes collection is implicitly admin-only (no explicit rule provided, so it defaults to deny).
 *
 * Denormalization for Authorization:
 * - No denormalization is needed as the data structure utilizes path-based authorization.
 *
 * Structural Segregation:
 * - User-specific data (profiles and preferences) are stored under the /users/{userId} path,
 *   ensuring clear ownership and preventing accidental public exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, update, delete) Signed-in user accesses their own profile.
     * @deny (create) Signed-in user attempts to create a profile for another user.
     * @deny (get, update, delete) Signed-in user attempts to access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /shoes/{shoeId} collection.
     * @path /shoes/{shoeId}
     * @allow (get, list) Any user can read shoe information.
     * @deny (create, update, delete) Only authorized admins can write shoe information (implicitly denied, no rule provided).
     * @principle Allows public read access with owner-only writes (implicitly denied in this case).
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Rules for the /users/{userId}/preferences/{preferenceId} collection.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create) Signed-in user creates their own preference.
     * @allow (get, update, delete) Signed-in user accesses their own preference.
     * @deny (create) Signed-in user attempts to create a preference for another user.
     * @deny (get, update, delete) Signed-in user attempts to access another user's preference.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/preferences/{preferenceId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
    
     /**
      * @description Public read-only access to categories
      * @path /categories
      * @allow (get, list) Any user can read category information.
      * @deny (create, update, delete) No writes allowed
      * @principle Public read, no writes allowed
      */
     match /categories/{categoryId} {
       allow get, list: if true;
       allow create: if false;
       allow update: if false;
       allow delete: if false;
     }
  }
}