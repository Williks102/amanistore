
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /shoes/{shoeId} {
      // Shoes are publicly readable
      allow read;
      // Writing to shoes requires admin privileges (not defined in rules, but could be done via backend)
      allow write: if false; 
    }

    match /collections/{collectionId} {
      // Collections are publicly readable
      allow read;
      // Writing to collections requires admin privileges (backend controlled)
      allow write: if false;
    }

    match /categories/{categoryId} {
      // Categories are publicly readable
      allow read;
      allow write: if false; // Admin only
    }

    match /promoCodes/{promoCodeId} {
      // Promo codes can be read by admins (backend) or validated by users
      allow read; 
      allow write: if false; // Admin only
    }

    match /orders/{orderId} {
      // Users can create their own orders
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Users can read their own orders, admins can read any
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      // Only admins can update orders (e.g., status)
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow delete: if false; // Orders should not be deleted
    }

     match /users/{userId} {
      // Users can read and write to their own user document
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
