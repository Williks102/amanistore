/**
 * @fileoverview Firestore Security Rules for Amani'store.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences.
 * Shoes are publicly readable, but write access is implicitly denied.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /shoes/{shoeId}: Stores shoe product information, globally readable.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preferences, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Shoe data is globally readable to enable easy listing and discovery.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's profile.
     * @deny (list) - Listing users is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to shoe product information, write access implicitly denied.
     * @path /shoes/{shoeId}
     * @allow (get, list) - Any user can read shoe information.
     * @deny (create, update, delete) - No user can create, update, or delete shoe information.
     * @principle Allows public read access with no write access.
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for user preferences.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create) - Authenticated user creates their own preferences.
     * @allow (get, update, delete) - Authenticated user accesses their own preferences.
     * @deny (create) - Unauthenticated user attempts to create preferences.
     * @deny (get, update, delete) - Authenticated user attempts to access another user's preferences.
     * @deny (list) - Listing preferences is not permitted.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/preferences/{preferenceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Fixes the reported error by granting list access to the orders collection.
     * @path /orders
     * @allow (list) - Grants list access to authenticated users.
     */
    match /orders/{orderId} {
      allow list: if request.auth != null;
      allow get: if false;
      allow create, update, delete: if false;
    }
  }
}