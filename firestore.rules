/**
 * @fileoverview Firestore Security Rules for Amani'store
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences,
 * and allows public read access to shoe product information. Write access to shoe products
 * is restricted, intending to be managed via DBAC (Database Account Control) by authorized admins, though specific role implementation is not defined in this ruleset.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  Only the user with the matching {userId} can read or write this data.
 * - /shoes/{shoeId}: Stores shoe product data.  Anyone can read this data, but only authorized admins (not yet defined) can write.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preference data. Only the user with the matching {userId} can read or write this data.
 *
 * Key Security Decisions:
 * - User data is strictly private; listing all users is disallowed.
 * - Shoe data is publicly readable to support open access.
 * - The ruleset anticipates future integration with a DBAC mechanism for admin-controlled shoe data management.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that the user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication required for all access.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Validates ownership based on user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's ID and the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Validates ownership and document existence for updates and deletes.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }

    /**
     * @description Defines rules for user documents.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' can create their own profile.
     * @allow (get, update, delete) - User with ID 'user123' can get, update, and delete their profile.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Defines rules for shoe documents.
     * @path /shoes/{shoeId}
     * @allow (get, list) - Any user can read shoe data.
     * @deny (create, update, delete) - Only authorized admins can write shoe data (DBAC).
     * @principle Allows public read access, restricts write access to admins (DBAC).
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add DBAC validation for admin users.
    }

    /**
     * @description Defines rules for user preference documents.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create, get, update, delete) - User with ID 'user123' can manage their own preferences.
     * @deny (create, get, update, delete) - User with ID 'user456' cannot access the preferences of user 'user123'.
     * @principle Enforces document ownership for user preferences.
     */
    match /users/{userId}/preferences/{preferenceId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description The error reported in the users instructions refers to listing categories
     * @path /categories
     * @allow (get, list) - Any user can read categories
     * @principle Allows public read access
     */
    match /categories/{categoryId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}