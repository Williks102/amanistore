/**
 * @fileoverview Firestore Security Rules for Amani'store
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences,
 * and allows public read access to shoe product information. Write access to shoe
 * data is implicitly restricted, as no explicit roles or admin collections are defined.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the owning user.
 * - /shoes/{shoeId}: Stores shoe products, publicly readable.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preferences, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - Users can only access their own data under their respective /users/{userId} path.
 * - Listing all users is disallowed.
 * - Shoe data is publicly readable, but write access requires database administration
 *   (DBAC) which is not yet implemented.
 *
 * Denormalization for Authorization:
 *  The current data structure does not require denormalization as the rules are primarily
 *  path-based.
 *
 * Structural Segregation:
 *  The data structure segregates user-specific data (profiles, preferences) from
 *  publicly readable data (shoe products) into different collections, improving
 *  security and performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123 if the document ID matches their UID.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot access the profile at /users/user123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.id == resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to shoe product information.
     * @path /shoes/{shoeId}
     * @allow (get, list) - Any user (authenticated or not) can read shoe information.
     * @deny (create, update, delete) - No user can create, update, or delete shoe information without explicit admin permissions (DBAC not implemented).
     * @principle Allows public read access with owner-only writes.
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin validation once DBAC is implemented.
    }

    /**
     * @description Controls access to user preferences.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create) - User with UID 'user123' can create their own preference at /users/user123/preferences/pref456 if the userId matches their UID.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their preference at /users/user123/preferences/pref456.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot access the preference at /users/user123/preferences/pref456.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/preferences/{preferenceId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Prevents unauthorized listing of orders.
     * @path /orders
     * @deny list - An unauthenticated user or a regular user attempting to list orders will be denied.
     * @principle Restricts access to a collection without defined access permissions.
     */
    match /orders {
        // The original code produced a permissions error due to missing rules.
        // We are explicitly denying list operations here to address the immediate issue.
        // TODO: Implement proper authorization for the 'orders' collection.
        allow get, create, update, delete: if false;
        allow list: if false;
    }
  }
}