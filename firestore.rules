/**
 * @fileoverview Firestore Security Rules for Amani'store.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences.
 * Shoe data is publicly readable but only writable by authorized admins.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /shoes/{shoeId}: Stores shoe product information, publicly readable.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preferences, accessible only to the owning user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Shoe data is globally readable to enable public browsing.
 * - Write access to shoes collection is disallowed for non-admin users
 * - All write operations validate document existence before modification or deletion.
 *
 * Denormalization for Authorization:
 * - Not applicable in this simplified model, but consider denormalizing admin roles directly onto the Shoe documents for future access control.
 *
 * Structural Segregation:
 * - User-specific data (profiles, preferences) is stored in user subcollections, ensuring clear ownership and efficient querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is signed in and the UID matches, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner and the resource exists.
     * @param {string} userId - The user ID to compare against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile document at /users/user123.
     * @allow (get) - User with UID 'user123' reads their profile document at /users/user123.
     * @allow (update) - User with UID 'user123' updates their profile document at /users/user123.
     * @allow (delete) - User with UID 'user123' deletes their profile document at /users/user123.
     * @deny (create) - User with UID 'user456' attempts to create a profile document at /users/user123.
     * @deny (get) - User with UID 'user456' attempts to read the profile document at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for /shoes/{shoeId} documents.
     * @path /shoes/{shoeId}
     * @allow (get, list) - Any user can read shoe documents.
     * @deny (create, update, delete) - Non-admin users cannot modify shoe documents.
     * @principle Public read access with owner-only writes (owner to be defined and implemented later).
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check
    }

    /**
     * @description Rules for /users/{userId}/preferences/{preferenceId} documents.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create) - User with UID 'user123' creates a preference document at /users/user123/preferences/pref456.
     * @allow (get) - User with UID 'user123' reads their preference document at /users/user123/preferences/pref456.
     * @allow (update) - User with UID 'user123' updates their preference document at /users/user123/preferences/pref456.
     * @allow (delete) - User with UID 'user123' deletes their preference document at /users/user123/preferences/pref456.
     * @deny (create) - User with UID 'user456' attempts to create a preference document at /users/user123/preferences/pref456.
     * @deny (get) - User with UID 'user456' attempts to read the preference document at /users/user123/preferences/pref456.
     * @principle Enforces document ownership for writes within user subcollections.
     */
    match /users/{userId}/preferences/{preferenceId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}