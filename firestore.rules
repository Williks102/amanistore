rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to the /categories collection.  Listing of categories must be allowed for all users.
     * @path /databases/{database}/documents/categories
     * @allow (list) Any user can list categories.
     * @deny (create) No one can create categories directly.
     * @principle Allows public listing of categories
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforce user-ownership for user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) A user can create their own profile. (auth.uid == userId)
     * @allow (get, update, delete) A user can only read, update, or delete their own profile.
     * @deny (create) A user cannot create a profile for another user. (auth.uid != userId)
     * @deny (get, update, delete) A user cannot read, update, or delete another user's profile.
     * @deny (list) User listing is disallowed to prevent account enumeration.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to shoe product information, but restrict write access.
     * @path /databases/{database}/documents/shoes/{shoeId}
     * @allow (get, list) Any user can read shoe information.
     * @deny (create, update, delete) Only authorized admins can create, update, or delete shoe information.
     * @principle Allows public read access with restricted write access.
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin check
    }

    /**
     * @description Enforce user-ownership for user preferences.
     * @path /databases/{database}/documents/users/{userId}/preferences/{preferenceId}
     * @allow (create) A user can create their own preferences. (auth.uid == userId)
     * @allow (get, update, delete) A user can only read, update, or delete their own preferences.
     * @deny (create) A user cannot create preferences for another user. (auth.uid != userId)
     * @deny (get, update, delete) A user cannot read, update, or delete another user's preferences.
     * @deny (list) Listing of user preferences is allowed to the owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/preferences/{preferenceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}