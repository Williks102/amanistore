rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth != null && request.auth.token.email == "sergemessou@hotmail.com";
    }

    // Default deny all reads/writes
    match /{document=**} {
      allow read, write: if false;
    }

    // This rule allows unauthenticated clients to list the collections
    // at the root of the database. This is necessary for the homepage
    // to fetch categories, products, and collections.
    match /databases/{database}/documents {
      allow list: if true;
    }

    // Users can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Products are publicly readable, but only admins can modify them
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Categories are publicly readable, but only admins can modify them
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Collections are publicly readable, but only admins can modify them
    match /collections/{collectionId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // Orders can be read by the user who owns it or by an admin.
    // Only admins can update status.
    // Users can create their own orders.
    match /orders/{orderId} {
      allow get: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());
      allow list: if request.auth != null && isAdmin();
      allow create: if request.auth != null;
      // Allow status-only updates for anyone, but full updates only for admins.
      // This is less secure and we should rely on server-side actions.
      allow update: if isAdmin() || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
      allow delete: if isAdmin();
    }

    // Promo codes are read-only for users, but writable by admins.
    match /promoCodes/{promoCodeId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}