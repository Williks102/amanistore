rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user can read/write their profile.
     * @path /users/{userId}
     * @allow (create, get, update, delete, list) - Authenticated user with ID matching {userId} can perform all operations.
     * @deny (create, get, update, delete, list) - Authenticated user with ID not matching {userId} cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects shoe data. Globally readable, but writeable only by authorized admins (via DBAC).
     * @path /shoes/{shoeId}
     * @allow (get, list) - Any user can read shoe data.
     * @deny (create, update, delete) - Only authorized admins should be able to create, update, or delete shoe data.
     * @principle Publicly readable with restricted write access.
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add admin role check once the admin role is defined.
    }

    /**
     * @description Protects user preferences. Only the user can read/write their preferences.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create, get, update, delete, list) - Authenticated user with ID matching {userId} can perform all operations.
     * @deny (create, get, update, delete, list) - Authenticated user with ID not matching {userId} cannot perform any operations.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/preferences/{preferenceId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

     /**
      * @description Orders data protection : all reads are denied and all writes are denied.
      * @path /orders
      * @allow None
      * @deny All
      * @principle Prevent access of any user
      */
    match /orders/{orderId}{
        allow get, list: if false;
        allow create, update, delete: if false;
    }
  }
}