/**
 * @fileoverview Firestore Security Rules for Amani'store
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and preferences,
 * and allows public read access to shoe product data.  Write access to shoe products
 * is implicitly denied in this version.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user.
 * - /shoes/{shoeId}: Stores shoe products, publicly readable.
 * - /users/{userId}/preferences/{preferenceId}: Stores user preferences, accessible only by the user.
 *
 * Key Security Decisions:
 * - Users can only access their own data in the /users/{userId} collection and its subcollections.
 * - Shoe product data in the /shoes/{shoeId} collection is publicly readable.
 * - Write access to the /shoes/{shoeId} collection is implicitly denied, as there are no specific admin roles defined in the provided information.
 * - Listing of the /users collection is implicitly denied.
 *
 * Denormalization for Authorization:
 *  - Not strictly needed due to the path-based security model for user data.
 *
 * Structural Segregation:
 *  - Public shoe data is stored in a separate collection (/shoes/{shoeId}) from private user data (/users/{userId}),
 *    allowing for efficient and secure list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only authenticated users can access the database.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the existing owner of the resource, ensuring the document exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Defines rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) - User '4EGh6QADgqUoPEyjoCYMrrPMigr2' can create their own profile.
     * @allow (get, update, delete) - User '4EGh6QADgqUoPEyjoCYMrrPMigr2' can get, update, and delete their own profile.
     * @deny (create) - User 'OTHER_USER_ID' cannot create a profile for '4EGh6QADgqUoPEyjoCYMrrPMigr2'.
     * @deny (get, update, delete) - User 'OTHER_USER_ID' cannot get, update, or delete the profile of '4EGh6QADgqUoPEyjoCYMrrPMigr2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the /shoes/{shoeId} collection.
     * @path /shoes/{shoeId}
     * @allow (get, list) - Any user can read shoe details and list all shoes.
     * @deny (create, update, delete) - No user can create, update, or delete shoe details without proper admin roles (DBAC not implemented in this version).
     * @principle Allows public read access but restricts write access.
     */
    match /shoes/{shoeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines rules for the /users/{userId}/preferences/{preferenceId} collection.
     * @path /users/{userId}/preferences/{preferenceId}
     * @allow (create) - User '4EGh6QADgqUoPEyjoCYMrrPMigr2' can create their own preference document.
     * @allow (get, update, delete) - User '4EGh6QADgqUoPEyjoCYMrrPMigr2' can read, update, and delete their own preference document.
     * @deny (create) - User 'OTHER_USER_ID' cannot create a preference document for '4EGh6QADgqUoPEyjoCYMrrPMigr2'.
     * @deny (get, update, delete) - User 'OTHER_USER_ID' cannot get, update, or delete the preference document of '4EGh6QADgqUoPEyjoCYMrrPMigr2'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/preferences/{preferenceId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Defines rules for the /promoCodes collection.
     * @path /promoCodes
     * @allow (get, list) - Temporarily allowing all users to read promo codes
     * @deny (create, update, delete) - Deny all create, update, and delete requests
     */
    match /promoCodes {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}