// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends similar shoes based on user preferences and current trends.
 *
 * - getShoeRecommendations - A function that takes a shoe description and generates recommendations.
 * - ShoeRecommendationInput - The input type for the getShoeRecommendations function.
 * - ShoeRecommendationOutput - The return type for the getShoeRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ShoeRecommendationInputSchema = z.object({
  shoeDescription: z
    .string()
    .describe('A detailed description of the shoe, including style, color, and any unique features.'),
  userPreferences: z
    .string()
    .optional()
    .describe('Optional: The user historical preferences.'),
});
export type ShoeRecommendationInput = z.infer<typeof ShoeRecommendationInputSchema>;

const ShoeRecommendationOutputSchema = z.object({
  recommendations: z
    .array(z.string())
    .describe('A list of recommended shoes based on the input shoe description and current trends.'),
});
export type ShoeRecommendationOutput = z.infer<typeof ShoeRecommendationOutputSchema>;

export async function getShoeRecommendations(input: ShoeRecommendationInput): Promise<ShoeRecommendationOutput> {
  return shoeStyleRecommendationFlow(input);
}

const prompt = ai.definePrompt({
  name: 'shoeStyleRecommendationPrompt',
  input: {
    schema: ShoeRecommendationInputSchema,
  },
  output: {
    schema: ShoeRecommendationOutputSchema,
  },
  prompt: `You are a personal shopping assistant specializing in recommending shoes.
  Based on the description of the shoe provided, and the user's purchase history, recommend other similar shoes that the user might like.
  Take into account current fashion trends when making your recommendations.

  Shoe Description: {{{shoeDescription}}}
  User Preferences: {{{userPreferences}}}
  `,
});

const shoeStyleRecommendationFlow = ai.defineFlow(
  {
    name: 'shoeStyleRecommendationFlow',
    inputSchema: ShoeRecommendationInputSchema,
    outputSchema: ShoeRecommendationOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
