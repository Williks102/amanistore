// This is an autogenerated file from Firebase Studio.
'use client';
import { db } from '@/lib/firebase';
import type { Order, OrderStatus } from '@/lib/types';
import { collection, getDocs, addDoc, updateDoc, doc, DocumentData, QueryDocumentSnapshot, query, where } from 'firebase/firestore';
import { addDocumentNonBlocking, updateDocumentNonBlocking } from '@/firebase';

const orderCollection = collection(db, 'orders');

const fromFirestore = (snapshot: QueryDocumentSnapshot<DocumentData>): Order => {
    const data = snapshot.data();
    return {
        ...data,
        id: snapshot.id,
        date: data.date.toDate().toISOString(),
    } as Order;
}

export const getOrdersByUserId = async (userId: string): Promise<Order[]> => {
    const q = query(orderCollection, where("userId", "==", userId));
    const snapshot = await getDocs(q);
    return snapshot.docs.map(fromFirestore);
};

export const getOrders = async (): Promise<Order[]> => {
    const snapshot = await getDocs(orderCollection);
    return snapshot.docs.map(fromFirestore);
};

export const addOrder = async (order: Omit<Order, 'id' | 'date' | 'status'>) => {
    const newOrder = {
        ...order,
        date: new Date(),
        status: 'En attente',
    }
    const docRef = await addDocumentNonBlocking(orderCollection, newOrder);
    return docRef?.id;
};

export const updateOrderStatus = async (id: string, status: OrderStatus) => {
    const orderDoc = doc(db, 'orders', id);
    updateDocumentNonBlocking(orderDoc, { status });
};
