// This is an autogenerated file from Firebase Studio.
import { db } from '@/firebase';
import type { PromoCode } from '@/lib/types';
import { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, where, query, limit, DocumentData, QueryDocumentSnapshot } from 'firebase/firestore';
import { errorEmitter } from '@/firebase/error-emitter';
import { FirestorePermissionError } from '@/firebase/errors';

const getPromoCodeCollection = () => collection(db, 'promoCodes');

const fromFirestore = (snapshot: QueryDocumentSnapshot<DocumentData>): PromoCode => {
    const data = snapshot.data();
    return {
        ...data,
        id: snapshot.id,
    } as PromoCode;
}

export const getPromoCodes = async (): Promise<PromoCode[]> => {
    try {
        const snapshot = await getDocs(getPromoCodeCollection());
        return snapshot.docs.map(fromFirestore);
    } catch(e) {
        const contextualError = new FirestorePermissionError({
          operation: 'list',
          path: getPromoCodeCollection().path,
        });
        errorEmitter.emit('permission-error', contextualError);
        throw contextualError;
    }
};

export const getPromoCodeByCode = async (code: string): Promise<PromoCode | null> => {
    const q = query(getPromoCodeCollection(), where("code", "==", code.toUpperCase()), limit(1));
    try {
        const snapshot = await getDocs(q);
        if (snapshot.empty) {
            return null;
        }
        return fromFirestore(snapshot.docs[0]);
    } catch (e) {
        const contextualError = new FirestorePermissionError({
          operation: 'list',
          path: getPromoCodeCollection().path,
        });
        errorEmitter.emit('permission-error', contextualError);
        throw contextualError;
    }
}

export const addPromoCode = async (promoCode: Omit<PromoCode, 'id'>) => {
    try {
        const docRef = await addDoc(getPromoCodeCollection(), promoCode);
        return docRef.id;
    } catch (e) {
        const contextualError = new FirestorePermissionError({
          operation: 'create',
          path: getPromoCodeCollection().path,
          requestResourceData: promoCode,
        });
        errorEmitter.emit('permission-error', contextualError);
        throw contextualError;
    }
};

export const updatePromoCode = async (id: string, promoCode: Partial<Omit<PromoCode, 'id'>>) => {
    const promoCodeDoc = doc(db, 'promoCodes', id);
    updateDoc(promoCodeDoc, promoCode).catch(e => {
        const contextualError = new FirestorePermissionError({
            operation: 'update',
            path: promoCodeDoc.path,
            requestResourceData: promoCode,
        });
        errorEmitter.emit('permission-error', contextualError);
    });
};

export const deletePromoCode = async (id: string) => {
    const promoCodeDoc = doc(db, 'promoCodes', id);
    deleteDoc(promoCodeDoc).catch(e => {
        const contextualError = new FirestorePermissionError({
            operation: 'delete',
            path: promoCodeDoc.path,
        });
        errorEmitter.emit('permission-error', contextualError);
    });
};