// This is an autogenerated file from Firebase Studio.
import { db } from '@/firebase';
import type { Shoe } from '@/lib/types';
import { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, DocumentData, QueryDocumentSnapshot } from 'firebase/firestore';
import { errorEmitter } from '@/firebase/error-emitter';
import { FirestorePermissionError } from '@/firebase/errors';

const getShoeCollection = () => collection(db, 'shoes');

const fromFirestore = (snapshot: QueryDocumentSnapshot<DocumentData>): Shoe => {
    const data = snapshot.data();
    return {
        ...data,
        id: snapshot.id,
    } as Shoe;
}

export const getProducts = async (): Promise<Shoe[]> => {
    try {
        const snapshot = await getDocs(getShoeCollection());
        return snapshot.docs.map(fromFirestore);
    } catch (e) {
        const contextualError = new FirestorePermissionError({
          operation: 'list',
          path: getShoeCollection().path,
        });
        errorEmitter.emit('permission-error', contextualError);
        // We must throw the error to be caught by Next.js error boundaries
        throw contextualError;
    }
};

export const addProduct = async (shoe: Omit<Shoe, 'id'>) => {
    try {
        const docRef = await addDoc(getShoeCollection(), shoe);
        return docRef.id;
    } catch (e) {
        const contextualError = new FirestorePermissionError({
          operation: 'create',
          path: getShoeCollection().path,
          requestResourceData: shoe,
        });
        errorEmitter.emit('permission-error', contextualError);
        throw contextualError;
    }
};

export const updateProduct = async (id: string, shoe: Partial<Shoe>) => {
    const shoeDoc = doc(db, 'shoes', id);
    updateDoc(shoeDoc, shoe).catch(e => {
        const contextualError = new FirestorePermissionError({
            operation: 'update',
            path: shoeDoc.path,
            requestResourceData: shoe,
        });
        errorEmitter.emit('permission-error', contextualError);
    });
};

export const deleteProduct = async (id: string) => {
    const shoeDoc = doc(db, 'shoes', id);
    deleteDoc(shoeDoc).catch(e => {
        const contextualError = new FirestorePermissionError({
            operation: 'delete',
            path: shoeDoc.path,
        });
        errorEmitter.emit('permission-error', contextualError);
    });
};